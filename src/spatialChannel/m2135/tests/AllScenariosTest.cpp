/*******************************************************************************
 * This file is part of IMTAphy
 * _____________________________________________________________________________
 *
 * Copyright (C) 2010
 * Institute of Communication Networks (LKN)
 * Department of Electrical Engineering and Information Technology (EE & IT)
 * Technische Universitaet Muenchen
 * Arcisstr. 21
 * 80333 Muenchen - Germany
 * http://www.lkn.ei.tum.de/~jan/imtaphy/index.html
 * 
 * _____________________________________________________________________________
 *
 *   IMTAphy is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   IMTAphy is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with IMTAphy.  If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/

#include <WNS/CppUnit.hpp>
#include <cppunit/extensions/HelperMacros.h>
#include <IMTAPHY/spatialChannel/m2135/ClusterPowers.hpp>
#include <IMTAPHY/tests/ChannelStub.hpp>
#include <IMTAPHY/tests/StationPhyStub.hpp>
#include <IMTAPHY/Link.hpp>
#include <IMTAPHY/linkManagement/LinkManager.hpp>

#include <WNS/pyconfig/View.hpp>
#include <WNS/pyconfig/Parser.hpp>
#include <WNS/node/Registry.hpp>
#include <WNS/node/Node.hpp>
#include <WNS/pyconfig/helper/Functions.hpp>
#include <WNS/node/Interface.hpp>
#include <WNS/evaluation/statistics/moments.hpp>


#include <itpp/itbase.h>
#include <algorithm>
#include <iostream>

namespace imtaphy { namespace scm { namespace m2135 { namespace tests {
                class AllScenariosTest :
            public CppUnit::TestFixture
                {
                
                    CPPUNIT_TEST_SUITE( AllScenariosTest );
                    CPPUNIT_TEST( testAllScenarioPowers );
                    CPPUNIT_TEST( testNothing );
                    CPPUNIT_TEST_SUITE_END();

                public:

                    void setUp();
                    void tearDown();
                    void testAllScenarioPowers();
                    void testNothing() { }
        
                private:
                    imtaphy::tests::ChannelStub* channel;
                    imtaphy::tests::StationPhyStub *bts1, *bts2, *ms1, *ms2, *ms3, *ms4, *ms5;
                    wns::node::Registry* registry;
                    wns::node::Interface* node;
                    imtaphy::LinkManagerStub* linkManager;
                };

                CPPUNIT_TEST_SUITE_REGISTRATION( AllScenariosTest );

                void
                AllScenariosTest::setUp()
                {       
                    imtaphy::Spectrum* spectrum = new imtaphy::Spectrum(2E09, 180000.0, 100, 0);
    
                    channel = new imtaphy::tests::ChannelStub();
                    channel->setSpectrum(spectrum);
    
                    linkManager = new imtaphy::LinkManagerStub();
        
                    
                    double lambda = spectrum->getSystemCenterFrequencyWavelenghtMeters(imtaphy::Downlink);
    
                    registry = new wns::node::Registry();
    
                    bts1 = createStationStub("BS1", wns::Position(100,100,10), "BS", 1, 10.0 * lambda, 0, registry, channel);
                    bts2 = createStationStub("BS2",wns::Position(150,150,10), "BS", 1, 10.0 * lambda, 0, registry, channel);
        
                    ms1 = createStationStub("MS1", wns::Position(50,20,1.5), "MS",1, 0.5 * lambda, 3.0, registry, channel);
                    ms2 = createStationStub("MS2", wns::Position(150,50,1.5), "MS",1, 0.5 * lambda, 3.0, registry, channel);
                    ms3 = createStationStub("MS3", wns::Position(50,150,1.5),"MS",1, 0.5 * lambda, 3.0, registry, channel);
                    ms4 = createStationStub("MS4", wns::Position(100,40,1.5),"MS",1, 0.5 * lambda, 3.0, registry, channel);
                    ms5 = createStationStub("MS5", wns::Position(60,180,1.5),"MS",1, 0.5 * lambda, 3.0, registry, channel);
        
                    imtaphy::StationList bsList = channel->getAllBaseStations();
                    imtaphy::StationList msList = channel->getAllMobileStations();
        
                    unsigned int i = 0;
                    for (imtaphy::StationList::const_iterator msIter=msList.begin(); msIter!=msList.end() ; msIter++) 
                        for (imtaphy::StationList::const_iterator bsIter=bsList.begin(); bsIter!=bsList.end() ; bsIter++)
                        {
                            Link::Propagation propagation;
                                
                            if (i%2) // for odd links condition is NLoS
                                propagation = Link::NLoS;
                            else
                                propagation = Link::LoS;
                        
                            // create link with no wrap-around, 0dB widebandLoss
                        
                            imtaphy::Link::Scenario scen;
                            switch(i)
                            {
                            case 0: case 1: scen=Link::InH; break;
                            case 2: case 3: scen=Link::UMi; break;
                            case 4: case 5: scen=Link::SMa; break;
                            case 6: case 7: scen=Link::UMa; break;
                            case 8: case 9: scen=Link::RMa; break;
                            default:scen=Link::InH;
                            }
                            LinkStub* link = new LinkStub(*bsIter, *msIter, scen, propagation, propagation, imtaphy::Link::NotApplicable, 
                                                          (*msIter)->getPosition(), wns::Ratio::from_dB(0.0), i);
                            i++;
                            linkManager->addLink(link, true);
                        }

                }

                void 
                AllScenariosTest::tearDown()
                {
                    delete channel;
                    delete linkManager;
                    delete node;
                    delete registry;
                }

                void 
                AllScenariosTest::testAllScenarioPowers()
                {
                    
                    itpp::mat tau_n = "\
        0.000000000000000 0.000000022366906 0.000000062080454 0.000000072076149 0.000000084725724 0.000000108256831 0.000000110112265 0.000000129630505 0.000000183566785 0.000000195984865 0.000000201421626 0.000000217506462 0.000000223367819 0.000000402068682 0.000000468562931 NaN NaN NaN NaN NaN ; \
        0.000000000000000 0.000000018572379 0.000000027239894 0.000000027989454 0.000000051598053 0.000000058449555 0.000000068019897 0.000000113159979 0.000000171688188 0.000000194872729 0.000000195114315 0.000000250599375 0.000000253300163 0.000000276695095 0.000000291877104 0.000000295950481 0.000000342675667 0.000000351197917 0.000000423312396 NaN;\
        0.000000000000000 0.000000130749156 0.000000421332116 0.000000495277133 0.000000643678028 0.000000757774877 0.000001073067623 0.000001145659405 0.000001177440818 0.000001271467181 0.000001305730637 0.000002739056040 NaN NaN NaN NaN NaN NaN NaN NaN ; \
        0.000000000000000 0.000000405867785 0.000000595281586 0.000000611661938 0.000001127587744 0.000001277315672 0.000001486459237 0.000002472919010 0.000003751953534 0.000004258612254 0.000004263891724 0.000005476423386 0.000005535444522 0.000006046700993 0.000006378477998 0.000006467494736 0.000007488594246 0.000007674833528 0.000009250772912 NaN;\
        0.000000000000000 0.000000120307214 0.000000333918628 0.000000387683518 0.000000455723108 0.000000582292336 0.000000592272349 0.000000697257149 0.000000987369856 0.000001054164283 0.000001083407556 0.000001169924747 0.000001201451841 0.000002162648854 0.000002520308422 NaN NaN NaN NaN NaN; \
        0.000000000000000 0.000000074374758 0.000000076421327 0.000000159588414 0.000000468770819 0.000000532072995 0.000000532732614 0.000000684226884 0.000000691601012 0.000000755477633 0.000000796930006 0.000000808051799 0.000000935628446 0.000001155795868 NaN NaN NaN NaN NaN NaN;\
        0.000000000000000 0.000000460935043 0.000001485338357 0.000001746019577 0.000002269182974 0.000002671412997 0.000003782926669 0.000004038837278 0.000004150877519 0.000004482352284 0.000004603142566 0.000009656099881 NaN NaN NaN NaN NaN NaN NaN NaN ; \
        0.000000000000000 0.000000505579794 0.000000741528036 0.000000761932649 0.000001069278599 0.000001404609087 0.000001591121586 0.000001851646724 0.000003080456072 0.000004673718792 0.000005304851443 0.000005311427952 0.000006821849646 0.000006895370864 0.000007532230823 0.000007945517505 0.000008056403526 0.000009328362767 0.000009560356587 0.000011523466590;\
        0.000000000000000 0.000000225929418 0.000000855819478 0.000001112250408 0.000001309405293 0.000001854218800 0.000001979654555 0.000002034571592 0.000002197045463 0.000002256251372 0.000004732981499 NaN NaN NaN NaN NaN NaN NaN NaN NaN ;\
        0.000000000000000 0.000000059231164 0.000000060861027 0.000000127094296 0.000000373323449 0.000000544910070 0.000000601653311 0.000000634665483 0.000000643522745 0.000000920461945 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN";
                    itpp::mat sig = "\
        57.126774942655111 82.112979498741822 0.000000037270062 0.384793494384016 3.451728943354666 ; \
        62.266168065314062 86.815969850225414 0.000000070839954 0.407285479359270 1.000000000000000 ; \
        34.157168366793940 95.859040465100406 0.000000245101310 0.534273895287917 3.824336943813235 ; \
        28.953292330280526 113.210711338580270 0.000001548086793 0.358898580054274 1.000000000000000; \
        6.493667390055316 52.361401130227833 0.000000300702572 0.292780239634143 13.196128324622421 ; \
        10.269808752704169 120.370497245393880 0.000000386837367 0.281742537812755 1.000000000000000; \
        22.735915654268503 116.968870034766970 0.000001106003329 0.374192592303668 7.522285452472181; \
        44.676851127776004 112.268938070457980 0.000002515323517 0.412852873925479 1.000000000000000; \
        8.920461499914742 39.632800711140902 0.000000356653018 0.325245568692664 6.698374822530453 ;  \
        7.895154662116728 45.768205366413440 0.000000271828793 0.335777823494960 1.000000000000000";
        
                    itpp::mat ksi = "\
        4.564779900741012 -4.936611505428730 9.997663102309103 3.677451365689387 0.064948033528371 -16.469647973725760 4.911705938005829 0.309252378109753 5.628554055280477 -1.010508648191071 7.989245468434095 -0.487202384347194 3.937003803809825 6.385571880256789 11.566968124923314 NaN NaN NaN NaN NaN;\
        5.796833239569192 -6.926132689813517 3.836064937977135 1.427941855844723 3.932097265541870 1.127448209567642 -1.659820678729584 0.151786348555065 1.652357125093487 0.188918989144521 -4.384349104336392 1.058208939408179 1.458125476246306 2.271872624210466 2.555844878001672 1.091810870086873 -0.268179141235593 4.737837122036675 0.156044371573270 NaN; \
        2.282389950370506 -2.468305752714365 4.998831551154551 1.838725682844694 0.032474016764186 -8.234823986862880 2.455852969002915 0.154626189054876 2.814277027640239 -0.505254324095535 3.994622734217047 -0.243601192173597 NaN NaN NaN NaN NaN NaN NaN NaN; \
        5.796833239569192 -6.926132689813517 3.836064937977135 1.427941855844723 3.932097265541870 1.127448209567642 -1.659820678729584 0.151786348555065 1.652357125093487 0.188918989144521 -4.384349104336392 1.058208939408179 1.458125476246306 2.271872624210466 2.555844878001672 1.091810870086873 -0.268179141235593 4.737837122036675 0.156044371573270 NaN; \
        2.282389950370506 -2.468305752714365 4.998831551154551 1.838725682844694 0.032474016764186 -8.234823986862880 2.455852969002915 0.154626189054876 2.814277027640239 -0.505254324095535 3.994622734217047 -0.243601192173597 1.968501901904913 3.192785940128395 5.783484062461657 NaN NaN NaN NaN NaN; \
        5.796833239569192 -6.926132689813517 3.836064937977135 1.427941855844723 3.932097265541870 1.127448209567642 -1.659820678729584 0.151786348555065 1.652357125093487 0.188918989144521 -4.384349104336392 1.058208939408179 1.458125476246306 2.271872624210466 NaN NaN NaN NaN NaN NaN; \
        2.282389950370506 -2.468305752714365 4.998831551154551 1.838725682844694 0.032474016764186 -8.234823986862880 2.455852969002915 0.154626189054876 2.814277027640239 -0.505254324095535 3.994622734217047 -0.243601192173597 NaN NaN NaN NaN NaN NaN NaN NaN ; \
        5.796833239569192 -6.926132689813517 3.836064937977135 1.427941855844723 3.932097265541870 1.127448209567642 -1.659820678729584 0.151786348555065 1.652357125093487 0.188918989144521 -4.384349104336392 1.058208939408179 1.458125476246306 2.271872624210466 2.555844878001672 1.091810870086873 -0.268179141235593 4.737837122036675 0.156044371573270 -2.571188554827520; \
        2.282389950370506 -2.468305752714365 4.998831551154551 1.838725682844694 0.032474016764186 -8.234823986862880 2.455852969002915 0.154626189054876 2.814277027640239 -0.505254324095535 3.994622734217047 NaN NaN NaN NaN NaN NaN NaN NaN NaN; \
        5.796833239569192 -6.926132689813517 3.836064937977135 1.427941855844723 3.932097265541870 1.127448209567642 -1.659820678729584 0.151786348555065 1.652357125093487 0.188918989144521NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN";
        
        
                    itpp::mat power = "\
        0.784811018205061 0.054576628791549 0.000811630291943 0.002865878154813 0.005152901667017 0.147054571110467 0.001032115248363 0.002040384812887 0.000210797451543 0.000764299602420 0.000086603126408 0.000446489966424 0.000143900770227 0.000002566237591 0.000000214563286 NaN NaN NaN NaN NaN ;\
        0.032339451594110 0.508302395464392 0.039307681992471 0.067955751601031 0.030571734635673 0.054674175776223 0.094927978129501 0.040901732432477 0.016690688406429 0.018795792168669 0.053752671697393 0.009106919915887 0.008097323392304 0.005387030697067 0.004374232916105 0.005897351627749 0.005196198477069 0.001514442737947 0.002206446337502 NaN;\
        0.831481235751122 0.080208015738341 0.006360946756932 0.010701730840748 0.010697941616392 0.052124217805731 0.001836067374071 0.002544376943317 0.001261539616135 0.002081196156540 0.000670789507550 0.000031941893122 NaN NaN NaN NaN NaN NaN NaN NaN; \
        0.032339451594110 0.508302395464392 0.039307681992471 0.067955751601031 0.030571734635673 0.054674175776223 0.094927978129501 0.040901732432477 0.016690688406429 0.018795792168669 0.053752671697393 0.009106919915887 0.008097323392304 0.005387030697067 0.004374232916105 0.005897351627749 0.005196198477069 0.001514442737947 0.002206446337502 NaN;\
        0.936609202501808 0.016670913141463 0.001973697113325 0.003681245601503 0.004889870867814 0.025668120908120 0.002147426629421 0.002975723190492 0.000918778528380 0.001733366655592 0.000581119718338 0.001303761850540 0.000736930865506 0.000086139222541 0.000023703205157 NaN NaN NaN NaN NaN; \
        0.023285317161798 0.408832807102109 0.034242076687890 0.055494388313449 0.023885220333810 0.043142449583329 0.081919037688807 0.047373007381763 0.033320712811725 0.044172681836767 0.122170962779648 0.034558121049687 0.028236827101785 0.019366390167432 NaN NaN NaN NaN NaN NaN;\
        0.897782817789613 0.035163190090401 0.003614289885388 0.006495558979455 0.007412817540529 0.039989583356390 0.001866397938822 0.002759521940329 0.001407575999859 0.002525392247996 0.000839233274953 0.000143620956265 NaN NaN NaN NaN NaN NaN NaN NaN ;\
        0.024182690707188 0.404074651849278 0.032152564697610 0.055723275857662 0.029216430963169 0.051685308842332 0.094165587898770 0.058520338930341 0.031428964248809 0.030774225941070 0.076545844461938 0.021828505961012 0.014178493271352 0.011563263441047 0.009387110649356 0.011984022879265 0.015987488584477 0.003793568500817 0.010341579965591 0.012466082348915;\
        0.907223368735251 0.069498169256957 0.003389156247173 0.004130663873368 0.004166276196492 0.009070780149280 0.000597076359556 0.000905478857351 0.000350859919113 0.000666752217310 0.000001418188150 NaN NaN NaN NaN NaN NaN NaN NaN NaN; \
        0.033921179340662 0.580498790769002 0.048585796181975 0.076515419410766 0.029603798254056 0.043544288508095 0.075915174224567 0.047582831083933 0.033232751630588 0.030599970596355 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN";
                    
                    unsigned int MaxClusters = power.cols();
                    imtaphy::scm::m2135::ClusterPowers* cPowers;
                    cPowers = new imtaphy::scm::m2135::ClusterPowers(linkManager, MaxClusters);
        
                    cPowers->initforTest(ksi);
                    
                    cPowers->computeClusterPowers(sig, &tau_n);

                    for (int k = 0; k < cPowers->getScaledClusterPowers()->rows(); k++)
                        for (int n = 0; n < cPowers->getScaledClusterPowers()->cols(); n++)
                        {
                            if( !std::isnan(power(k,n)) )
                                CPPUNIT_ASSERT_DOUBLES_EQUAL(power(k,n), (*(cPowers->getScaledClusterPowers()))(k,n), 1e-4);
                        }
                }


        
            }}}}
